import pytest
from mad.data_structures import GoalNode
from mad.optimize import initial_goal_allocation
from mad.optimize import _all_goals
from mad.optimize import print_assigned_goals
from typing import Dict, List

def test_tree_creation():

    # write your test case here
    pass

def test_goal_allocation(all_goals: List) -> int:
    """
    Takes in a list of GoalNodes and adds each GoalNode's assigned_agents cost to a score

    Parameters
    ----------
    all_goals : List
        List of all GoalNodes

    Returns
    -------
    score : int
        Total cost of all agents to accomplish every GoalNode
    """
    
    # write your test case here
    if all_goals == []:
        print("Goals not distributed!")
        return -1
    
    score = 0
    for goal in all_goals:
        goal_cost = goal.data[goal.assigned_agent]
        score += goal_cost
    return score


def main():
    # Create goal tree
    root_node = GoalNode("Root Goal", {"Agent1": 1, "Agent2": 2})

    child_node1 = GoalNode("Child Goal 1", {"Agent1": 4, "Agent2": 1})
    child_node2 = GoalNode("Child Goal 2", {"Agent1": 2, "Agent2": 3})
    root_node.add_child(child_node1)
    root_node.add_child(child_node2)
    child_node1.add_parent(root_node)
    child_node2.add_parent(root_node)

    child_node11 = GoalNode("Child Goal 1.1", {"Agent1": 1, "Agent2": 2})
    child_node12 = GoalNode("Child Goal 1.2", {"Agent1": 3, "Agent2": 1})
    child_node1.add_child(child_node11)
    child_node1.add_child(child_node12)
    child_node11.add_parent(child_node1)
    child_node12.add_parent(child_node1)

    child_node21 = GoalNode("Child Goal 2.1", {"Agent1": 2, "Agent2": 1})
    child_node2.add_child(child_node21)
    child_node21.add_parent(child_node2)

    child_node211 = GoalNode("Child Goal 2.1.1", {"Agent1": 1, "Agent2": 3})
    child_node21.add_child(child_node211)
    child_node211.add_parent(child_node21)

    # Print Tree
    root_node.print_tree()


# Optimization tests.py
    # Get a list of all GoalNodes
    goals = _all_goals(root_node)

    # Assign agents goals they are best fitted for
    agent_greedy_assignments = initial_goal_allocation(root_node, 10)
    # Print agents and goals
    print_assigned_goals(agent_greedy_assignments)
    # Compute score for greedy
    print(test_goal_allocation(goals))

    # # Assign agents goals they randomly chosen for
    # agent_random_assignments = assign_goals_random(goals)
    # # Print agents and goals
    # print_assigned_goals(agent_random_assignments)
    # # Compute score for random
    # print(test_goal_allocation(goals))

if __name__ == '__main__':
    main()